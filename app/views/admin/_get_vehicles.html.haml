
%h3= 'Importazione veicoli'+" (#{@results.to_a.size} trovati)"
-# = form_tag(:admin_import_vehicles, method: :post, multipart: true) do |f|
-#   = file_field_tag 'file', accept: 'application/xls,application/xlsx,text/csv'
-#   = submit_tag 'Importa'
.container-fluid.scrollable-panel#results
  -if @no_delete_vehicles.size > 0
    .row{style: "background-color: #999"}
      .col-sm-12
        = "Mezzi non trovati in access, con ordini di magazzino"
    .row{style: "background-color: #999"}
      .col-sm-12
        = @no_delete_vehicles.map { |v| v.plate }.join(', ')
    .row
      .col-sm-12
        %br

  -if @delete_vehicles.size > 0
    .row{style: "background-color: #999"}
      = form_tag(massive_vehicle_delete_path,method: :post, remote: true) do
        .col-sm-10
          = "Mezzi non trovati in access, senza ordini di magazzino"
        .col-sm-2
          = submit_tag 'Elimina selezionati', data: { confirm: "Eliminare i mezzi selezionati?"}
        .row
          .col-sm-12
            -@delete_vehicles.each do |v|
              .floating-block
                = check_box_tag 'vehicles_list[]', v.id
                = "(#{v.id}) - #{v.plate}"


  %br
  %br
  = @results.each do |r|

    - manufacturer = Company.where("name like '%#{r[:data]['marca']}%'").first
    - model = VehicleModel.where("name like '#{r[:data]['modello']}' and manufacturer_id in (select id from companies where name like '%#{r[:data]['marca']}%')").first
    - case r[:route]
    - when :new
      = form_tag(vehicles_path,method: :post, remote: true) do
        .row.bottom_border{style: "background-color: #{r[:color]}"}
          .col-sm-10
            %b= r[:vehicle].long_label unless r[:vehicle].nil?
          .col-sm-2
            = submit_tag 'Crea'
        - r[:data].each do |k,v|
          - vehicle_information_type = VehicleInformationType.where("name like '#{k}'").first
          - vehicle_equipment = VehicleEquipment.where("name like '#{k}'").first
          .row.bottom_border{style: "background-color: #{r[:color]}"}
            .col-sm-2
              = k
            .col-sm-2
              = v.inspect
            .col-sm-4
              -case k
              -when 'ditta'
                -if v == 'A'
                  - property =  @chiarcosso
                -elsif v == 'T'
                  - property =  @transest
                = select_tag 'property_id', options_from_collection_for_select(@transporters,'id','name',selected: property.nil?? nil : property.id), class: 'form-control'
                -# = text_field_tag 'vehicle[property]', @vehicle.property.name, placeholder: 'Cerca propriet√†..', class: 'form-control custom_autocomplete', data: { route: custom_vehicle_property_autocomplete_path, target: 'Vehicle' }
              -when 'marca'
                = select_tag 'manufacturer_id', options_from_collection_for_select(@manufacturers,'id','name', selected: manufacturer.nil?? nil : manufacturer.id), class: 'form-control'
                -# = text_field_tag 'vehicle_model[manufacturer]', @vehicle_model.manufacturer.name, placeholder: 'Cerca produttore..', class: 'form-control custom_autocomplete', data: { route: custom_vehicle_manufacturers_autocomplete_path, target: 'VehicleModel' }
              -when 'modello'
                = select_tag 'vehicle_model_id', options_from_collection_for_select(VehicleModel.where("manufacturer_id in (select id from companies where name like '%#{r[:data]['marca']}%')"),'id','complete_name',selected: model.nil?? nil : model.id), class: 'form-control'

              -else
                -unless vehicle_information_type.nil?
                  .col-sm-6
                    = select_tag 'vehicle_informations[][vehicle_information_type_id]', options_from_collection_for_select(@information_types,'id','name',selected: vehicle_information_type.nil?? nil : vehicle_information_type.id), class: 'form-control'
                  .col-sm-6
                    -if vehicle_information_type == @plate or vehicle_information_type == @chassis
                      = text_field_tag 'vehicle_informations[][information]', v.tr('. *','').upcase, class: 'form-control'
                    -else
                      = text_field_tag 'vehicle_informations[][information]', v, class: 'form-control'
                -unless vehicle_equipment.nil?
                  -# = select_tag 'vehicle_equipments[]', options_from_collection_for_select(@equipment,'id','name',selected: vehicle_equipment.nil?? nil : vehicle_equipment.id), class: 'form-control'
                  = checkbox_field 'vehicle_equipments[]', vehicle_equipment.id, true
                  = vehicle_equipment.name
    - when :edit
      = form_tag(update_vehicle_path,method: :post, remote: true) do
        = hidden_field_tag :id, r[:vehicle].id
        .row.bottom_border{style: "background-color: #{r[:color]}"}
          .col-sm-10
            %b= r[:vehicle].long_label unless r[:vehicle].nil?
          .col-sm-2
            = submit_tag 'Aggiorna'
        - r[:data].each do |k,v|
          .row.bottom_border{style: "background-color: #{r[:color]}"}
            .col-sm-2
              = k
            .col-sm-2
              = hidden_field_tag k, v
              = v.inspect
    - when :delete
      = form_tag(vehicle_path(r[:vehicle].id),method: :delete, remote: true) do
        .row.bottom_border{style: "background-color: #{r[:color]}"}
          .col-sm-10
            %b= r[:vehicle].long_label unless r[:vehicle].nil?
          .col-sm-2
            = submit_tag 'Elimina', data: { confirm: "Eliminare il mezzo nr. #{r[:vehicle].id}, #{r[:vehicle].plate}"}

    -# .row.bottom_border{style: "background-color: #{r[:color]}"}
    -#   .col-sm-10
    -#     %b= r[:vehicle].long_label unless r[:vehicle].nil?
    -#   .col-sm-2
    -#     -case r.route
    -#     -when :new
    -#       = submit_tag 'Crea'
    -#     -when :edit
    -#       = submit_tag 'Aggiorna'
    -#     -when :delete
    -#       = submit_tag 'Elimina'
